<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <%- include('partials/head') %>
    <title><%= title %></title>
    <!--<script type="text/javascript" src="https://rawgit.com/schmich/instascan-builds/master/instascan.min.js"></script>-->
    <script src="path/to/qr-scanner.umd.min.js"></script>
  </head>
  <body>
    <%- include('partials/navigation') %>

    <div class="container h-100 mt-5">
      <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="card bg-dark text-white" style="border-radius: 1rem;">
          <div class="card-body p-5 text-center">
            <div class="col-md-12">
              <video id="preview" width="100%"></video>
            </div>
            <div class="col-md-12">
              <label center>Resultado de escaneo</label>
              <form action="#" method="post" name="Resultado">
                <input type="text" name="text" id="text" readonly="" placeholder="Resultado" class="form-control"/>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    <body>
      <h1>Scan from WebCam:</h1>
      <div id="video-container">
          <video id="qr-video"></video>
      </div>
      <div>
          <label>
              Highlight Style
              <select id="scan-region-highlight-style-select">
                  <option value="default-style">Default style</option>
                  <option value="example-style-1">Example custom style 1</option>
                  <option value="example-style-2">Example custom style 2</option>
              </select>
          </label>
          <label>
              <input id="show-scan-region" type="checkbox">
              Show scan region canvas
          </label>
      </div>
      <div>
          <select id="inversion-mode-select">
              <option value="original">Scan original (dark QR code on bright background)</option>
              <option value="invert">Scan with inverted colors (bright QR code on dark background)</option>
              <option value="both">Scan both</option>
          </select>
          <br>
      </div>
      <b>Device has camera: </b>
      <span id="cam-has-camera"></span>
      <br>
      <div>
          <b>Preferred camera:</b>
          <select id="cam-list">
              <option value="environment" selected>Environment Facing (default)</option>
              <option value="user">User Facing</option>
          </select>
      </div>
      <b>Camera has flash: </b>
      <span id="cam-has-flash"></span>
      <div>
          <button id="flash-toggle">ðŸ“¸ Flash: <span id="flash-state">off</span></button>
      </div>
      <br>
      <b>Detected QR code: </b>
      <span id="cam-qr-result">None</span>
      <br>
      <b>Last detected at: </b>
      <span id="cam-qr-result-timestamp"></span>
      <br>
      <button id="start-button">Start</button>
      <button id="stop-button">Stop</button>
      <hr>
      
      <h1>Scan from File:</h1>
      <input type="file" id="file-selector">
      <b>Detected QR code: </b>
      <span id="file-qr-result">None</span>

    <script type="module">
 
      const video = document.getElementById('qr-video');
      const videoContainer = document.getElementById('video-container');
      const camHasCamera = document.getElementById('cam-has-camera');
      const camList = document.getElementById('cam-list');
      const camHasFlash = document.getElementById('cam-has-flash');
      const flashToggle = document.getElementById('flash-toggle');
      const flashState = document.getElementById('flash-state');
      const camQrResult = document.getElementById('cam-qr-result');
      const camQrResultTimestamp = document.getElementById('cam-qr-result-timestamp');
      const fileSelector = document.getElementById('file-selector');
      const fileQrResult = document.getElementById('file-qr-result');
  
      function setResult(label, result) {
          console.log(result.data);
          label.textContent = result.data;
          camQrResultTimestamp.textContent = new Date().toString();
          label.style.color = 'teal';
          clearTimeout(label.highlightTimeout);
          label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);
      }
  
      // ####### Web Cam Scanning #######
  
      const scanner = new QrScanner(video, result => setResult(camQrResult, result), {
          onDecodeError: error => {
              camQrResult.textContent = error;
              camQrResult.style.color = 'inherit';
          },
          highlightScanRegion: true,
          highlightCodeOutline: true,
      });
  
      const updateFlashAvailability = () => {
          scanner.hasFlash().then(hasFlash => {
              camHasFlash.textContent = hasFlash;
              flashToggle.style.display = hasFlash ? 'inline-block' : 'none';
          });
      };
  
      scanner.start().then(() => {
          updateFlashAvailability();
          // List cameras after the scanner started to avoid listCamera's stream and the scanner's stream being requested
          // at the same time which can result in listCamera's unconstrained stream also being offered to the scanner.
          // Note that we can also start the scanner after listCameras, we just have it this way around in the demo to
          // start the scanner earlier.
          QrScanner.listCameras(true).then(cameras => cameras.forEach(camera => {
              const option = document.createElement('option');
              option.value = camera.id;
              option.text = camera.label;
              camList.add(option);
          }));
      });
  
      QrScanner.hasCamera().then(hasCamera => camHasCamera.textContent = hasCamera);
  
      // for debugging
      window.scanner = scanner;
  
      document.getElementById('scan-region-highlight-style-select').addEventListener('change', (e) => {
          videoContainer.className = e.target.value;
          scanner._updateOverlay(); // reposition the highlight because style 2 sets position: relative
      });
  
      document.getElementById('show-scan-region').addEventListener('change', (e) => {
          const input = e.target;
          const label = input.parentNode;
          label.parentNode.insertBefore(scanner.$canvas, label.nextSibling);
          scanner.$canvas.style.display = input.checked ? 'block' : 'none';
      });
  
      document.getElementById('inversion-mode-select').addEventListener('change', event => {
          scanner.setInversionMode(event.target.value);
      });
  
      camList.addEventListener('change', event => {
          scanner.setCamera(event.target.value).then(updateFlashAvailability);
      });
  
      flashToggle.addEventListener('click', () => {
          scanner.toggleFlash().then(() => flashState.textContent = scanner.isFlashOn() ? 'on' : 'off');
      });
  
      document.getElementById('start-button').addEventListener('click', () => {
          scanner.start();
      });
  
      document.getElementById('stop-button').addEventListener('click', () => {
          scanner.stop();
      });
  
      // ####### File Scanning #######
  
      fileSelector.addEventListener('change', event => {
          const file = fileSelector.files[0];
          if (!file) {
              return;
          }
          QrScanner.scanImage(file, { returnDetailedScanResult: true })
              .then(result => setResult(fileQrResult, result))
              .catch(e => setResult(fileQrResult, { data: e || 'No QR code found.' }));
      });
  </script>
  

    <!--<script type="text/javascript">
      let scanner = new Instascan.Scanner({
        video: document.getElementById("preview"),
      });
      scanner.addListener("scan", function (content) {
        document.getElementById("text").value = content;
        document.Resultado.submit();
      });
      Instascan.Camera.getCameras()
        .then(function (cameras) {
          if (cameras.length > 0) {
            scanner.start(cameras[0]);
          } else {
            console.error("No cameras found.");
          }
        })
        .catch(function (e) {
          console.error(e);
        });
    </script>-->

  </body>
  <%- include('partials/footer') %>
</html>
